/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recursivealgorithmtest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Robinso3
 */
public class RecursiveAlgorithmTest {
    private static int recursiveCallsCounter = 0;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //set values for ArrayOfArrays
        ArrayList<String> VariableA = new ArrayList<String>(Arrays.asList("A", "B"));
        ArrayList<String> VariableB = new ArrayList<String>(Arrays.asList("red", "green","blue"));
        ArrayList<String> VariableC = new ArrayList<String>(Arrays.asList("1", "2", "3", "4"));

//		List<String> allCombinations = new ArrayList<String>();
        ArrayList<ArrayList<String>> allCombinations = new ArrayList<ArrayList<String>>();
        ArrayList<ArrayList<String>> AofA = new ArrayList<ArrayList<String>>();

        AofA.add(VariableA);
        AofA.add(VariableB);
        AofA.add(VariableC);
        ArrayList<ArrayList<String>> testCases = new ArrayList<ArrayList<String>>();

        
        
        for(int i=0; i<AofA.size();i++){
            System.out.println("ArrayOfArrays["+i+"] :" + AofA.get(i).toString());
        }
        
        testCases = computeAllTestCases(allCombinations, AofA);
        
    }
    
    /**
     * Returns a ArrayList<String> of all the test cases generated by this test suite
     * @return 
     */
    private static ArrayList<ArrayList<String>> computeAllTestCases(ArrayList<ArrayList<String>> allCombinations, ArrayList<ArrayList<String>> arrayOfArrays) {
        System.out.println("DEBUG: List of Lists: ToString(): " +arrayOfArrays.toString());
        
        ArrayList<String> optionsList = new ArrayList<String>();

        ArrayList<ArrayList<String>> tests = new ArrayList<ArrayList<String>>();
        //recursive call
        tests = recurse(optionsList, arrayOfArrays, allCombinations);
        
        System.out.println("DEBUG: allCombinations.size(): "+allCombinations.size());
        System.out.println("DEBUG: allCombinations.toString(): "+allCombinations.toString());
        return tests;
    }


    /**
     * 
     * @param optionsList
     * @param AofA
     * @return 
     */
    private static ArrayList<ArrayList<String>> recurse(
            ArrayList<String> optionsList, 
            ArrayList<ArrayList<String>> AofA, ArrayList<ArrayList<String>> testCases){
        recursiveCallsCounter++;
        
        System.out.println("DEBUG: in Recurse iteration #"+recursiveCallsCounter+" : optionsList:" +optionsList.toString());
        System.out.println("DEBUG: in Recurse iteration #"+recursiveCallsCounter+" : AofA:" +AofA.toString());
        

        
        //check to see if we are at the end of all TestAspects
        if(AofA.size() == 0){
            //no more aspects, add the current options as a TestCase
            //TestCase newTest = new TestCase((this.testCases.size() + 1), OptionsList);
            testCases.add(optionsList);


        }// end of if there are more TestAspects
        else {            //still something left in the AofA stack
            //take the top TestAspect off the stack
            ArrayList<String> currentAspectsOptions = AofA.remove(0);
//            Iterator i = currentAspect.iterator();
            
            //Iterator implementation vs for loop
            /*
            while(i.hasNext()) {
                newOptionsList.add(i.next().toString());
                recurse(newOptionsList, AofA);
            }
            */
            
            for (int i=0 ; i<currentAspectsOptions.size();i++){
                ArrayList<String> newOptionsList = new ArrayList<String>();

                newOptionsList.addAll(optionsList);
                newOptionsList.add(currentAspectsOptions.get(i));
                System.out.println("DEBUG: Before Recursive Call; newOptionsList: " + newOptionsList.toString());
                System.out.println("DEBUG: Before Recursive Call; currentAspectsOptions["+i+"]: " + currentAspectsOptions.get(i));
                System.out.println("DEBUG: Before Recursive Call; AofA: " + AofA.toString());
                if(AofA.size()>0){
                    recurse(newOptionsList,AofA,testCases );
                } else {
                    //no more items to remove from AofA
                }
            }
        }
        
        
        return testCases;        
    }//end recursive helper 

}
